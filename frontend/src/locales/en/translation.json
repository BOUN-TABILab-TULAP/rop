{
    "useradd.success": "User has been added successfully",
    "feedback.success": "Thanks for your feedback",
    "useradd.email.label": "Email",
    "useradd.email.placeholder": "dip@boun.edu.tr",
    "useradd.password.label": "Password",
    "useradd.username.label": "Usename",
    "submitbutton": "Submit",
    "feedback.header": "Give us Feedback",
    "feedback.description": "You can send us your comments, any bug reports or improvment ideas.",
    "feedback.type.desc": "Select type of feedback",
    "feedback.select.comment": "Comment",
    "feedback.select.error": "Please provide a type",
    "feedback.select.bug": "Bug",
    "feedback.select.improvements": "Improvements",
    "feedback.text.desc": "you can write your comment/ bug reports here",
    "feedback.text.label": "feedback",
    "feedback.text.error": "feedback  is required",
    "git.label": "Git address",
    "git.placeholder": "https://github.com/boun-tabi/BoAT.git",
    "git.helper": "please give us the address git repository",
    "git.name": "git_address",
    "git.required": true,
    "name.label": "Task name",
    "name.placeholder": "Boun Pars",
    "name.helper": "please write your tool name",
    "name.name": "name",
    "name.required": true,
    "enum.label": "Tool name",
    "enum.placeholder": "Boun-Pars",
    "enum.helper": "please write a unique nick for tool",
    "enum.name": "enum",
    "enum.required": true,
    "desc.label": "Description",
    "desc.placeholder": "description",
    "desc.helper": "please write a description for your tool",
    "desc.name": "description",
    "desc.required": true,
    "endpoint.label": "Endpoint",
    "endpoint.placeholder": "endpoint",
    "endpoint.helper": "please write endpoint of your API",
    "endpoint.name": "endpoint",
    "endpoint.required": true,
    "contact.label": "Contact e-mail",
    "contact.placeholder": "tabilab@boun.edu.tr",
    "contact.helper": "please write a contact mail of your API",
    "contact.name": "contact_mail",
    "contact.required": true,
    "guide.header": " Usage Guide",
    "tr.guide.label": "Write your guide here in Turkish",
    "en.guide.label": "Write your guide here in English",
    "input.header": "Input Definitions",
    "json.label": "Json field",
    "type.label": "Input type",
    "deletebutton": "Delete",
    "addbutton": "Append",
    "waitbutton": "Wait",
    "managetools": "Manage Tools",
    "manageusers": "Manage Users",
    "addtool": "Add Tool",
    "mytools": "My Tools",
    "logout": "Log out",
    "addexample": "Add example",
    "output.header": "Output Definitions",
    "output.type": "Output type",
    "demo.label": "Demo",
    "usage.label": "Usage",
    "use.example": "Select an example",
    "required": "required",
    "usage.header": "Usage Information",
    "trydemo": "Demo",
    "learnmore": "Learn more",
    "signin": "Sign in",
    "specialchar": "You cannot use special characters in enum",
    "name": "İsim",
    "endpoint": "Endpoint",
    "enum": "Enum",
    "edit": "Edit",
    "restart": "Restart",
    "save": "Save",
    "exit": "Exit",
    "general.info": "General Information",
    "define.input": "Define Input",
    "define.output": "Define Output",
    "usage.info": "Usage Information",
    "addtool.header": "Add your tool to the system",
    "notfound":"Not Found",
    "restart.success":"Succesfully restarted the tool",
    "restart.failure":"Error occured while restarting",
    "adduser":"Add User",
    "cancel":"Cancel",
    "sample.sentence":"Sample Sentences",
    "select":"Select the type of feedback",
    "demo.gitaddress":"Git Address",
    "demo.clarin":"Tulap Address",
    "textarea":"Please write your input",
    "about": "About us ",
    "aboutcontent":"TULAP (Turkish Language Processing Platform) is a platform that includes language resources prepared by students and natural language processing developers at Boğaziçi University Computer Engineering and Linguistics departments. The language resources are formed of software tools and corpora. The software tools have been developed as open source. The tools that execute via docker in the Demo site were put into use with API support for researchers and language processing people. Users can give input in the format specified in the tools’ pages and get the output on the screen. At the same time they can  copy the tools from their GitHub links and can execute through docker easily. ",
    "developerheader": "Our team",
    "developerdescription":"We have developed the platform and modify the older tools during 9 months as a team. ",
    "tooldeveloperheader":"Tool developers",
    "tooldevelopercontent":" We want to thank to the developers that provide us their nlp tools and help us to build their tools ın our services. ",
    "readmore":"Read More",
    "guideline":" 1) General Information\n- Name: It should be related with your tool’s functionality such as Sentiment Analysis and Name Recognition. \n - Git address: The platform will pull the code from your git repository. Do not forget that the repository must be public. Moreover, your project must have a Dockerfile in the root directory.\n - Enum: A meaningful short nickname for your tool. It can contain letters, numbers, hyphen, and underscore.\n - Endpoint: The system will send POST requests to this endpoint.For example, you need to type 'evaluate/' if you send your requests to a URL like 'localhost:3000/evaluate'. Schema, hostname and port are handled by the platform. \n - Contact mail: Developer’s mail address to connect in case of a bug or future development.\n  - Description: A short text to explain the abstract definition of the tool as well as the input and output specifications that your tool supports. \n\n 2) Input Definition: \n DIP does not limit the number of inputs your tool can work with. The fields explained below should be given for each input. \n - Json field: the field name of the input in the POST request.\n - Input type: There are many different NLP related data types to have a clear understanding of what to provide and expect in return. RawSentence, token  etc..\n - Input name: A clear name for the input such as sentence or word. The user should be able to understand what to write to the specified textarea.\n - Example: Some basic examples to place in the field(s). \n\n 3) Output Definitions: \n  A tool can provide more than one output. The fields explained below should be given for each output. \n - Name: A clear name for the output such as “Sentiment Analyze” or “Dependencies”\n - Json fields: Field of the json that contains the output of the tool.\n - Output Type: There are standard formats to represent the output in a more  sophisticated and easy to use format like JSON and CoNLL. \n\n 4) User Guide:  How a user can run the tool in a local environment and general information about the API of the tool so that a user can improve the tool or use the tool for their own projects.",
    "guide":"Help",
    "field.description.eng":"Please write these fields in English",
    "field.description.tr":"Please write these fields in Turkish",
    "docker.alert":"You can use Docker to run the tool in your local environment. Do not forget check GitHub page for more information"

}